spring.application.name=space-reservation

# MySQL DB setting
spring.datasource.url=jdbc:mysql://localhost:3306/space_reservation?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.security.user.name=admin
spring.security.user.password=password
spring.security.user.roles=USER

# 아래 설정들은 Spring에서 JPA와 Hibernate를 사용할 때 DB와의 상호작용을 제어 or 디버깅에 도움을 주기 위해 사용하는 옵션
# JPA가 애플리케이션 시작 시 데이터베이스 스키마를 어떻게 관리할지를 결정 (update:엔티티와 스키마가 다르면 필요한 부분만 수정)
#none: 스키마 변경을 하지 않음. 기본값.
#update: 애플리케이션 실행 시 DB스키마를 엔티티 클래스와 일치하도록 자동으로 업데이트. 예를 들어, 엔티티의 필드가 변경되면 해당 테이블의 컬럼도 수정.
#create: 애플리케이션 실행 시 DB스키마를 처음부터 다시 생성. 기존 테이블은 삭제되고 새 테이블이 생성됨.
#create-drop: create와 같지만, 애플리케이션 종료 시점에 생성된 테이블을 삭제.
#validate: DB스키마와 엔티티 클래스 간의 일치 여부만 확인. 일치하지 않으면 오류가 발생하지만, 실제로 테이블을 변경하지는 않음.
spring.jpa.hibernate.ddl-auto=validate
# JPA가 실행하는 SQL 쿼리를 콘솔에 출력
spring.jpa.show-sql=true
# 콘솔에 출력되는 SQL 쿼리를 읽기 쉽게 포맷팅
spring.jpa.properties.hibernate.format_sql=true
# JPA가 사용할 데이터베이스의 종류를 Hibernate에 알려주는 설정
# Hibernate는 Java 기반의 객체 관계 매핑(Object-Relational Mapping, ORM) 프레임워크로, JPA의 구현체 중 하나
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect



#############################################################################

# ?????? ?? ??????? ???? ??? DataSource ?? ??? ???? ?
# DataSourceAutoConfiguration? ???????
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

# H2 setting
#spring.datasource.url=jdbc:h2:tcp://localhost/~/test
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none

